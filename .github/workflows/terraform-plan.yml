name: Terraform Plan

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '*.tf'
      - '*.tfvars'
      - 'modules/**/*.tf'
      - 'examples/**/*.tf'
      - '.github/workflows/terraform-plan.yml'

env:
  TF_VERSION: "1.6.0"

jobs:
  plan-basic:
    name: Plan Basic Example
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create test tfvars
        run: |
          cd examples/basic
          cat > terraform.tfvars << EOF
          aws_region         = "us-east-1"
          name_prefix        = "test-chatops"
          github_owner       = "test-org"
          github_repo        = "test-repo"
          github_token       = "dummy-token-12345"
          telegram_bot_token = "123456:ABC-DEF-dummy-token"
          authorized_chat_id = "123456789"
          s3_bucket_arn      = "arn:aws:s3:::test-bucket"
          webhook_lambda_zip_path  = "lambda_function.zip"
          telegram_lambda_zip_path = "telegram-bot.zip"
          EOF

      - name: Terraform Init
        run: |
          cd examples/basic
          terraform init -backend=false

      - name: Terraform Plan
        id: plan
        run: |
          cd examples/basic
          terraform plan -out=tfplan -no-color
        continue-on-error: true

      - name: Save plan output
        if: always()
        run: |
          cd examples/basic
          terraform show -no-color tfplan > plan-output.txt

      - name: Comment PR with plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('examples/basic/plan-output.txt', 'utf8');
            const output = `## Terraform Plan - Basic Example
            
            \`\`\`terraform
            ${plan.substring(0, 60000)}
            \`\`\`
            
            *Plan generated for commit ${{ github.sha }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: basic-plan
          path: examples/basic/tfplan
          retention-days: 5

  plan-with-ai:
    name: Plan With-AI Example
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create test tfvars
        run: |
          cd examples/with-ai
          cat > terraform.tfvars << EOF
          aws_region         = "us-east-1"
          name_prefix        = "test-chatops"
          github_owner       = "test-org"
          github_repo        = "test-repo"
          github_token       = "dummy-token-12345"
          telegram_bot_token = "123456:ABC-DEF-dummy-token"
          authorized_chat_id = "123456789"
          s3_bucket_arn      = "arn:aws:s3:::test-bucket"
          webhook_lambda_zip_path      = "lambda_function.zip"
          telegram_lambda_zip_path     = "telegram-bot.zip"
          ai_processor_lambda_zip_path = "output_processor.zip"
          enable_ai_processing         = true
          ai_model_id                  = "anthropic.claude-3-haiku-20240307-v1:0"
          EOF

      - name: Terraform Init
        run: |
          cd examples/with-ai
          terraform init -backend=false

      - name: Terraform Plan
        id: plan
        run: |
          cd examples/with-ai
          terraform plan -out=tfplan -no-color
        continue-on-error: true

      - name: Save plan output
        if: always()
        run: |
          cd examples/with-ai
          terraform show -no-color tfplan > plan-output.txt

      - name: Comment PR with plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('examples/with-ai/plan-output.txt', 'utf8');
            const output = `## Terraform Plan - With-AI Example
            
            \`\`\`terraform
            ${plan.substring(0, 60000)}
            \`\`\`
            
            *Plan generated for commit ${{ github.sha }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: with-ai-plan
          path: examples/with-ai/tfplan
          retention-days: 5

  plan-summary:
    name: Plan Summary
    runs-on: ubuntu-latest
    needs: [plan-basic, plan-with-ai]
    if: always()
    
    steps:
      - name: Plan summary
        run: |
          echo "## Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Examples Planned:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Basic example (Telegram + GitHub)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ With-AI example (Telegram + GitHub + AI)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Review the plan output in PR comments for details." >> $GITHUB_STEP_SUMMARY

